-module(rebar_mirror_deps).

-export(['get-deps-mirror'/2,
         'upd-deps-mirror'/2]).

-define(getdeps, 'get-deps-mirror').
-define(upddeps, 'upd-deps-mirror').


?getdeps(Config, _AppFile) ->
    get_deps_mirror(Config),
    ok.

?upddeps(Config, _AppFile) ->
%    upd_deps_mirror(Config),
    ok.

get_deps_mirror(Config) ->
    Deps = rebar_config:get(Config, deps, []),
    [get_dep_mirror(Config, Dep) || Dep <- Deps].


get_dep_mirror(Config, {App, Vsn, {git, Url, {tag, Tag}}}) ->
    get_dep_mirror(Config, {App, Vsn, {git, Url, Tag}});

get_dep_mirror(Config, {App, Vsn, {git, Url, {branch, Branch}}}) ->
    get_dep_mirror(Config, {App, Vsn, {git, Url, Branch}});

get_dep_mirror(Config, {App, Vsn, {git, Url, Rev}}) ->
    try
        get_deps_mirror_cmd(Config, dep_name(App, Rev), dep_dir(Config))
    catch
        C:R ->
            %get_dep_origin(Config, App,
            %    fun() ->
                        download_dep(Url, Rev, app_dir(Config, App)),
                        upd_deps_mirror_cmd(Config, dep_name(App, Rev), dep_dir(Config), App)% end)
    end,
    get_dep_origin(Config, App).


get_dep_origin({config, Dir, Opts, Globals, Envs, SkipDirs, XConf} = Config, App) ->
    %rebar_deps:'get-deps'(Config, nop), %% get with git clone
    %F(),
    ConfigFile = filename:join(app_dir(Config, App), "rebar.config"),
    case filelib:is_regular(ConfigFile) of
        true ->
            {config, _Dir, NewOpts, _Globals, _Envs, _SkipDirs, _XConf} = rebar_config:new(ConfigFile),
            get_deps_mirror({config, Dir, NewOpts, Globals, Envs, SkipDirs, XConf});
        false ->
            nop
    end.


get_deps_mirror_cmd(Config, File, Dir) ->
    Cmd = rebar_config:get(Config, get_deps_mirror_cmd, []),
    io:format("D: ~p ~p~n", [filename:join(Dir, File), Dir]),
    rebar_utils:sh(lists:flatten(io_lib:format(Cmd, [File, filename:join(Dir, File)])), [{use_stdout, false}, {cd, Dir}]),
    rebar_utils:sh("tar -xzf " ++ filename:join(Dir, File), [{use_stdout, false}, {cd, Dir}]).

upd_deps_mirror_cmd(Config, File, Dir, App) ->
    %Cmd = rebar_config:get(Config, upd_deps_mirror_cmd, []),
    Cmd = "cp ~s /tmp/~s",
    rebar_utils:sh(lists:flatten("tar -czf " ++ filename:join(Dir, File) ++ " ./" ++ atom_to_list(App)), [{use_stdout, false}, {cd, Dir}]),
    rebar_utils:sh(lists:flatten(io_lib:format(Cmd, [filename:join(Dir, File), File])), [{use_stdout, false}, {cd, Dir}]).


download_dep(Url, Rev, AppDir) ->
    %ok = filelib:ensure_dir(AppDir),
    io:format("DD~n"),
    rebar_utils:sh(lists:flatten(io_lib:format("git clone -q ~s ~s", [Url, filename:basename(AppDir)])), [{cd, filename:dirname(AppDir)}]),
    rebar_utils:sh(lists:flatten(io_lib:format("git checkout -q ~s", [Rev])), [{cd, AppDir}]).


app_dir(Config, App) ->
   DepsDir = rebar_config:get(Config, deps_dir, "deps"),
%    DepsDir = "~/Documents/prog/erl/rebar-plugins/deps",
    BaseDir = rebar_config:get_xconf(Config, base_dir, []),
    filename:join([BaseDir, DepsDir, App]).

dep_dir(Config) ->
    DepsDir = rebar_config:get(Config, deps_dir, "deps"),
%    DepsDir = "~/Documents/prog/erl/rebar-plugins/deps", http://cryolite.iteye.com/blog/1560139
    BaseDir = rebar_config:get_xconf(Config, base_dir, []),
    filename:join([BaseDir, DepsDir]).

dep_name(App, Rev) ->
    MD5 = [io_lib:format("~2.16.0b", [D]) || <<D>> <= erlang:md5(erlang:term_to_binary(Rev))],
    lists:flatten([atom_to_list(App), "_", MD5, ".tgz"]).

